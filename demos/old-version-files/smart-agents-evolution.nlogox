extensions [llm]

globals [
  generation               ; current generation counter
  evolution-log           ; list of evolution events for display
  total-evolutions        ; count of total rule changes
  best-rule              ; current best performing rule
  best-energy            ; energy of best performing agent
  unique-rules           ; list of all current unique rules
  evolution-flash-agents ; agents that just evolved (for visual effect)
]

breed [smart-agents smart-agent]
breed [food-sources food-source]

smart-agents-own [
  movement-rule          ; NetLogo code string for movement
  energy                 ; food collected
  evolution-count        ; how many times this agent evolved
  flash-timer           ; for visual evolution effect
  rule-history          ; string of previous rules for display
]

;;; Setup Procedures

to setup
  clear-all
  
  ; Initialize globals
  set generation 0
  set evolution-log []
  set total-evolutions 0
  set best-rule "fd 1"
  set best-energy 0
  set unique-rules []
  set evolution-flash-agents []
  
  ; Create food scattered around
  ask n-of num-food patches [
    sprout-food-sources 1 [
      set color green
      set shape "circle"
      set size 0.5
    ]
  ]
  
  ; Create smart agents with simple starting rule
  create-smart-agents num-agents [
    set movement-rule "fd 1"
    set energy 0
    set evolution-count 0
    set flash-timer 0
    set rule-history ""
    set color red
    set size 1
    setxy random-xcor random-ycor
    set label movement-rule
  ]
  
  ; Update displays
  update-best-rule
  update-unique-rules
  
  reset-ticks
end

;;; Main Loop

to go
  ; Move agents according to their rules
  ask smart-agents [
    move-with-rule
    collect-food
    update-visual-effects
  ]
  
  ; Evolution logic
  if ticks > 0 and ticks mod evolution-interval = 0 and not pause-evolution? [
    evolve-random-agent
    set generation generation + 1
  ]
  
  ; Maintenance
  replenish-food
  update-displays
  
  tick
end

;;; Agent Behavior

to move-with-rule
  carefully [
    run movement-rule
  ] [
    ; If rule fails, use simple fallback
    fd 1
  ]
end

to collect-food
  if any? food-sources-here [
    ask one-of food-sources-here [ die ]
    set energy energy + 1
    set size 1 + (energy * 0.1)  ; Visual size reflects energy
    
    ; Mark patch with faint green (food trail)
    ask patch-here [ set pcolor green - 3 ]
  ]
end

to update-visual-effects
  ; Handle evolution flash effect
  if flash-timer > 0 [
    set flash-timer flash-timer - 1
    if flash-timer <= 0 [
      set color red
    ]
  ]
  
  ; Update label with current rule
  if show-rules? [
    set label movement-rule
  ]
end

;;; Evolution System

to evolve-random-agent
  if count smart-agents = 0 [ stop ]
  
  let evolving-agent one-of smart-agents
  
  ask evolving-agent [
    let old-rule movement-rule
    let old-energy energy
    
    ; Track rule in conversation history
    llm:chat (word "RULE_VERSION: " movement-rule " (energy: " energy ")")
    
    ; Get rule evolution history
    let rule-history-text get-rule-evolution-history
    
    ; Build environment info
    let env-info (word "Food nearby: " count food-sources in-radius 5 
                      " | Position: (" precision xcor 1 ", " precision ycor 1 ")")
    
    ; Use LLM template to evolve rule
    carefully [
      let new-rule llm:chat-with-template "demos/movement-evolution.yaml" (list
        ["current_rule" movement-rule]
        ["rule_history" rule-history-text]
        ["energy_collected" energy]
        ["environment_info" env-info]
        ["goal" "collect food more efficiently than current strategy"]
      )
      
      ; Clean the rule and apply it
      let cleaned-rule clean-netlogo-rule new-rule
      if cleaned-rule != "" [
        set movement-rule cleaned-rule
        set evolution-count evolution-count + 1
        set rule-history (word rule-history old-rule " â†’ ")
        
        ; Visual evolution effect
        set color yellow
        set flash-timer 20
        
        ; Log evolution event
        let evolution-event (word "Gen " generation ": Agent " who 
                                 " evolved from '" old-rule "' to '" movement-rule "'")
        set evolution-log lput evolution-event evolution-log
        if length evolution-log > 10 [
          set evolution-log but-first evolution-log
        ]
        
        set total-evolutions total-evolutions + 1
        
        print evolution-event
      ]
    ] [
      ; If LLM call fails, make a simple random mutation
      set movement-rule mutate-rule-randomly movement-rule
      print (word "LLM failed, using random mutation for agent " who)
    ]
  ]
  
  update-displays
end

to-report get-rule-evolution-history
  let history llm:history
  let rule-versions []
  foreach history [ msg ->
    let role item 0 msg
    let content item 1 msg
    if role = "user" and (substring content 0 13) = "RULE_VERSION:" [
      set rule-versions lput (substring content 13 (length content)) rule-versions
    ]
  ]
  
  ifelse length rule-versions > 0 [
    report (reduce [(word ?1 "\n" ?2)] rule-versions)
  ] [
    report "No previous versions"
  ]
end

to-report clean-netlogo-rule [raw-rule]
  let cleaned raw-rule
  
  ; Remove common LLM response artifacts
  if position ":" cleaned != false [
    let colon-pos position ":" cleaned
    if colon-pos < 20 [  ; If colon near start, take text after it
      set cleaned substring cleaned (colon-pos + 1) (length cleaned)
    ]
  ]
  
  ; Remove quotes
  set cleaned remove "\"" cleaned
  set cleaned remove "'" cleaned
  
  ; Trim whitespace
  while [length cleaned > 0 and first cleaned = " "] [ 
    set cleaned substring cleaned 1 (length cleaned) 
  ]
  while [length cleaned > 0 and last cleaned = " "] [ 
    set cleaned substring cleaned 0 (length cleaned - 1) 
  ]
  
  ; Validate it contains only allowed commands
  if validate-rule cleaned [
    report cleaned
  ]
  report ""
end

to-report validate-rule [rule-string]
  ; Simple validation - check if rule contains only allowed commands
  let allowed-commands (list "fd" "bk" "lt" "rt" "random")
  let words-in-rule []
  
  ; Split rule into words (simplified)
  let current-word ""
  let i 0
  while [i < length rule-string] [
    let char substring rule-string i (i + 1)
    if char = " " [
      if current-word != "" [
        set words-in-rule lput current-word words-in-rule
        set current-word ""
      ]
    ] [
      set current-word (word current-word char)
    ]
    set i i + 1
  ]
  if current-word != "" [
    set words-in-rule lput current-word words-in-rule
  ]
  
  ; Check each word is either an allowed command or a number
  foreach words-in-rule [ word-item ->
    let is-command member? word-item allowed-commands
    let is-number false
    carefully [ 
      let num read-from-string word-item
      if is-number? num [ set is-number true ]
    ] [ ]
    
    if not (is-command or is-number) [
      report false
    ]
  ]
  
  report true
end

to-report mutate-rule-randomly [current-rule]
  ; Simple random mutations as fallback
  let mutations (list
    "fd 1"
    "lt 30 fd 1"
    "rt 45 fd 2"
    "fd random 3"
    "lt random 60 fd 1"
    "rt random 90 fd 2"
  )
  report one-of mutations
end

;;; Manual Evolution

to evolve-now
  if count smart-agents > 0 [
    evolve-random-agent
  ]
end

;;; Food Management

to replenish-food
  let food-needed num-food - count food-sources
  if food-needed > 0 [
    ask n-of (min list food-needed (count patches with [not any? food-sources-here])) 
        patches with [not any? food-sources-here] [
      sprout-food-sources 1 [
        set color green
        set shape "circle"
        set size 0.5
      ]
    ]
  ]
  
  ; Fade food trails
  ask patches with [pcolor != black and pcolor != green] [
    set pcolor pcolor + 0.1
    if pcolor >= black [ set pcolor black ]
  ]
end

;;; Display Updates

to update-displays
  update-best-rule
  update-unique-rules
end

to update-best-rule
  if any? smart-agents [
    let best-agent max-one-of smart-agents [energy]
    ask best-agent [
      set best-rule movement-rule
      set best-energy energy
    ]
  ]
end

to update-unique-rules
  set unique-rules []
  ask smart-agents [
    if not member? movement-rule unique-rules [
      set unique-rules lput movement-rule unique-rules
    ]
  ]
end

;;; Reporters

to-report mean-energy
  ifelse any? smart-agents [
    report precision (mean [energy] of smart-agents) 1
  ] [
    report 0
  ]
end

to-report max-energy
  ifelse any? smart-agents [
    report max [energy] of smart-agents
  ] [
    report 0
  ]
end

to-report rule-diversity
  report length unique-rules
end

to-report evolution-events-text
  ifelse length evolution-log > 0 [
    report reduce [(word ?1 "\n" ?2)] evolution-log
  ] [
    report "No evolutions yet"
  ]
end

;;; Agent Interaction

to inspect-agent
  if mouse-down? [
    let clicked-agent min-one-of smart-agents [distancexy mouse-xcor mouse-ycor]
    if clicked-agent != nobody and [distancexy mouse-xcor mouse-ycor] of clicked-agent < 2 [
      ask clicked-agent [
        let info (word "Agent " who ":\n"
                       "Rule: " movement-rule "\n"
                       "Energy: " energy "\n"
                       "Evolutions: " evolution-count "\n"
                       "History: " rule-history)
        user-message info
      ]
      wait 0.5  ; Prevent multiple clicks
    ]
  ]
end
@#$#@#$#@
GRAPHICS-WINDOW
210
10
647
448
-1
-1
13.0
1
10
1
1
1
0
0
0
1
-16
16
-16
16
1
1
1
ticks
30.0

BUTTON
20
10
83
43
setup
setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
90
10
153
43
go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
160
10
235
43
evolve now
evolve-now
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
20
50
192
83
num-agents
num-agents
3
20
10.0
1
1
NIL
HORIZONTAL

SLIDER
20
90
192
123
num-food
num-food
20
100
50.0
5
1
NIL
HORIZONTAL

SLIDER
20
130
192
163
evolution-interval
evolution-interval
50
500
100.0
50
1
ticks
HORIZONTAL

SWITCH
20
170
192
203
show-rules?
show-rules?
0
1
-1000

SWITCH
20
210
192
243
pause-evolution?
pause-evolution?
1
1
-1000

MONITOR
20
250
100
295
generation
generation
0
1
11

MONITOR
110
250
190
295
best energy
best-energy
0
1
11

MONITOR
20
300
100
345
mean energy
mean-energy
1
1
11

MONITOR
110
300
190
345
rule diversity
rule-diversity
0
1
11

MONITOR
20
350
100
395
total evolutions
total-evolutions
0
1
11

TEXTBOX
20
400
190
440
Click agents to see details. Yellow flash = evolution!
11
0.0
1

PLOT
660
10
1000
200
Agent Energy Over Time
generation
energy
0.0
10.0
0.0
20.0
true
true
"" ""
PENS
"mean-energy" 1.0 0 -16777216 true "" "plot mean-energy"
"max-energy" 1.0 0 -2674135 true "" "plot max-energy"

PLOT
660
210
1000
400
Rule Diversity Over Time
generation
unique rules
0.0
10.0
0.0
10.0
true
false
"" ""
PENS
"diversity" 1.0 0 -13345367 true "" "plot rule-diversity"

OUTPUT
210
460
1000
580
12

TEXTBOX
210
585
1000
625
Evolution Log: Recent rule changes appear above. Watch agents flash yellow when they evolve!
11
0.0
1

BUTTON
660
410
760
443
clear output
clear-output
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
770
410
900
443
show evolution log
output-print evolution-events-text
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

TEXTBOX
660
450
1000
480
LLM Extension Demo: Smart Agents with Evolving Movement Rules
14
0.0
1
@#$#@#$#@
## WHAT IS IT?

This model demonstrates the LLM extension's template system by showing agents that evolve their movement rules using artificial intelligence. Each agent has a NetLogo code string that controls how it moves, and periodically agents use LLM reasoning to improve their movement strategies based on their performance history.

## HOW IT WORKS

**Agents:** Each smart-agent has a `movement-rule` (NetLogo code string) that it executes each tick to move around the world.

**Food Collection:** Agents collect green food circles by moving over them, gaining energy and increasing in size.

**Evolution:** Every `evolution-interval` ticks, a random agent uses the LLM extension's template system to evolve its movement rule. The agent:
1. Tracks its rule history using conversation history
2. Uses a YAML template (`movement-evolution.yaml`) with variables for current rule, history, energy, and environment
3. Gets an improved movement rule from the LLM
4. Adopts the new rule and flashes yellow

**Visual Feedback:** Agents show their current rules as labels, flash yellow when evolving, grow with energy, and leave faint green trails where they collect food.

## HOW TO USE IT

1. **Setup:** Click `setup` to create agents and food
2. **Run:** Click `go` to start the simulation
3. **Configure:** Use sliders to adjust number of agents, food, and evolution frequency
4. **Manual Evolution:** Click `evolve now` to trigger evolution immediately
5. **Inspect:** Click on any agent to see its detailed history
6. **Monitor:** Watch plots and monitors to track energy and rule diversity over time

**Controls:**
- `show-rules?`: Toggle display of movement rules on agents
- `pause-evolution?`: Stop automatic evolution while keeping simulation running

## THINGS TO NOTICE

- **Evolution Events:** Agents flash bright yellow when they evolve new rules
- **Performance Growth:** Successful agents collect more food and grow larger
- **Rule Diversity:** Watch how many unique movement strategies emerge
- **Visual Trails:** Green patches show where food was recently collected
- **Rule Complexity:** Rules start simple ("fd 1") but can become sophisticated

## THINGS TO TRY

- **Different Evolution Speeds:** Try fast evolution (50 ticks) vs slow (500 ticks)
- **Population Size:** Compare small groups (5 agents) vs large (20 agents)
- **Food Density:** See how food scarcity affects rule evolution
- **Manual Inspection:** Click agents to see their rule evolution history
- **Pause and Observe:** Use `pause-evolution?` to study current strategies

## EXTENDING THE MODEL

- **New Templates:** Create specialized YAML templates for different goals
- **Environmental Challenges:** Add obstacles or moving food
- **Communication:** Let agents share successful strategies
- **Multiple Objectives:** Balance food collection with other goals
- **Rule Validation:** Add constraints to prevent invalid movements

## LLM EXTENSION FEATURES

This model showcases:
- **Template System:** YAML-based structured prompting with variable substitution
- **Conversation History:** Agents remember their rule evolution journey
- **Error Handling:** Graceful fallbacks when LLM calls fail
- **Visual Integration:** AI reasoning made visible through NetLogo graphics

## TECHNICAL NOTES

**Requirements:** 
- LLM extension installed
- Valid LLM provider configured (OpenAI, Anthropic, etc.)
- Internet connection for LLM API calls

**Template File:** `demos/movement-evolution.yaml` defines the evolution prompts

**Fallback Behavior:** If LLM calls fail, agents use simple random mutations

## CREDITS AND REFERENCES

Created to demonstrate the NetLogo LLM Extension's template capabilities.
Extension available at: https://github.com/NetLogo/LLM-Extension
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.4.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
1
@#$#@#$#@
